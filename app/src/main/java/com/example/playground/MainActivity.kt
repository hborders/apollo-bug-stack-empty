package com.example.playground

import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.util.Log
import android.view.View
import android.widget.Button
import com.google.android.material.snackbar.Snackbar
import androidx.appcompat.app.AppCompatActivity;
import autogenerated.BrokenQuery
import com.apollographql.apollo.ApolloCall
import com.apollographql.apollo.ApolloClient
import com.apollographql.apollo.api.Operation
import com.apollographql.apollo.api.Response
import com.apollographql.apollo.api.ResponseField
import com.apollographql.apollo.cache.normalized.CacheKey
import com.apollographql.apollo.cache.normalized.CacheKeyResolver
import com.apollographql.apollo.cache.normalized.lru.EvictionPolicy
import com.apollographql.apollo.cache.normalized.lru.LruNormalizedCacheFactory
import com.apollographql.apollo.exception.ApolloException
import com.apollographql.apollo.fetcher.ApolloResponseFetchers

import java.net.ServerSocket
import java.util.concurrent.TimeUnit

class MainActivity : AppCompatActivity() {
    companion object {
        private const val TAG = "MainActivity"
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val mainHandler = Handler(Looper.getMainLooper())
        Thread({
            val serverSocket = ServerSocket(8080)
            while (true) {
                val socket = serverSocket.accept()

                // total hack to slurp in all input
                Thread({
                    while (socket.getInputStream().read() != -1) {

                    }
                }).start()
                Thread.sleep(1000)

                val socketOutputStream = socket.getOutputStream()
                val bufferedWriter = socketOutputStream.writer()
                bufferedWriter.write("HTTP/1.1 200 OK\r\n")
                bufferedWriter.write("Content-Type: application/json\r\n")

                val brokenQueryResponseInputStream = resources.openRawResource(R.raw.broken_query_response)
                val buffer = ByteArray(1024 * 1024)
                val bytesRead = brokenQueryResponseInputStream.read(buffer)
                require(brokenQueryResponseInputStream.read() == -1)
                bufferedWriter.write("Content-Length: ${bytesRead}\r\n")
                bufferedWriter.write("Connection: Closed\r\n")
                bufferedWriter.write("\r\n")
                bufferedWriter.flush()
                socketOutputStream.write(buffer, 0, bytesRead)
                socketOutputStream.flush()
            }
        }).apply {
            isDaemon = true
            start()
        }

        val button: Button = findViewById(R.id.make_request_button)!!
        button.setOnClickListener {
            val cacheFactory = LruNormalizedCacheFactory(
                EvictionPolicy
                    .builder()
                    .maxSizeBytes(1024 * 10L)
                    .expireAfterWrite(5, TimeUnit.MINUTES)
                    .build()
            )
            val resolver = object : CacheKeyResolver() {
                override fun fromFieldRecordSet(responseField: ResponseField, map: Map<String, Any>): CacheKey {
                    if (map.containsKey("id") && !map["id"]?.toString().isNullOrEmpty()) {
                        val typeNameAndIDKey = map["__typename"].toString() + "." + map["id"]
                        return CacheKey.from(typeNameAndIDKey)
                    }
                    return CacheKey.NO_KEY
                }

                override fun fromFieldArguments(responseField: ResponseField, variables: Operation.Variables): CacheKey {
                    return CacheKey.NO_KEY
                }
            }
            val apolloClient = ApolloClient
                .builder()
                .normalizedCache(cacheFactory, resolver)
                .serverUrl("http://localhost:8080")
                .build()
            val call = apolloClient.query(BrokenQuery())
            call.responseFetcher(ApolloResponseFetchers.NETWORK_ONLY)
            call.enqueue(object : ApolloCall.Callback<BrokenQuery.Data>() {
                override fun onFailure(e: ApolloException) {
                    Log.e(TAG, "GQL Failure", e)
                    mainHandler.post({
                        findViewById<View>(android.R.id.content)?.let { view ->
                            Snackbar.make(view, "GQL Error", Snackbar.LENGTH_LONG).show()
                        }
                    })
                }

                override fun onResponse(response: Response<BrokenQuery.Data>) {
                    mainHandler.post({
                        findViewById<View>(android.R.id.content)?.let { view ->
                            val creatorCount = response
                                .data()
                                ?.foos()
                                ?.size
                                ?: 0
                            Snackbar.make(view, "GQL Rows: $creatorCount", Snackbar.LENGTH_LONG).show()
                        }
                    })
                }
            })
        }
    }
}
